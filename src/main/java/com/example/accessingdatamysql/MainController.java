package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@CrossOrigin(origins = "http://localhost:5500")
@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody User addNewUser (@RequestParam User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return userRepository.save(user);
    }
    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteUser(@PathVariable("id") Integer id ){
        Optional<User> user = userRepository.findById(id);
        if(user.isPresent()){
            userRepository.delete(user.get());
            return "deleted";
        }
        return "böyle bi kullanıcı bulunamadı.";

    }
    @PutMapping(path="/{id}")
    public @ResponseBody User updateUser(@PathVariable("id") Integer id,@RequestParam String name,@RequestParam String email){
        Optional<User> user = userRepository.findById(id);
        if(user.isPresent()){
            User orgUser = user.get();
            orgUser.setEmail(email);
            orgUser.setName(name);
            return  userRepository.save(orgUser);
        }
        return null;

    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/one/{id}")
    public @ResponseBody User  getOneUser(@PathVariable("id") Integer id) {
        // This returns a JSON or XML with the users
        Optional<User> user = userRepository.findById(id);
        if(user.isPresent()){
            return user.get();
        }
       return null;
    }
}